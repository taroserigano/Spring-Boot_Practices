API Gateway 


for routing, 
uri is like 8081 or 8080, 
predicate is the endpoint
- and they connect together for routing that switch around 

spring.application.name=API-GATEWAY
server.port=9191
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/
management.endpoints.web.exposure.include=*

## Routes for Employee Service
spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employees/**

## Routes for Department Service
spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/departments/**

spring.zipkin.base-url=http://127.0.0.1:9411/
spring.sleuth.sampler.probability=1.0



CONFIG SERVER 

- way to extract configuratyion info from the github repo 

@RefreshScope and @Value will auto-update the value in the github repo 


spring.application.name=CONFIG-SERVER
server.port=8888
eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/

spring.cloud.config.server.git.uri=https://github.com/RameshMF/config-server-repo
spring.cloud.config.server.git.clone-on-start=true
spring.cloud.config.server.git.default-label=main


SPRING BUS 


1. Add bus-amqp dependency to EVERY EACH service  
2. Run RabbitMQ 
3. call POST request on 

url.../busrefresh 











CIRCUIT BREAKER 


- this is all about returning Default method to prevent complete  failure 

    @Retry(name = "${spring.application.name}", fallbackMethod = "getDefaultDepartment")
    @Override
    public APIResponseDto getEmployeeById(Long employeeId) {

- CLOSED status means everything's working 

- will start OPEN status when too many calls fail.
- it will occasionally move to HALF OPEN status to see if calls are getting successful or not 
- when CLOSED, it will only return Default Method in order to prevent the entire app from failing 


#spring.datasource.url=jdbc:mysql://localhost:3306/employee_db
#spring.datasource.username=root
#spring.datasource.password=Mysql@123

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.hibernate.ddl-auto=update

#server.port=8081

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

spring.application.name=EMPLOYEE-SERVICE
spring.config.import=optional:configserver:http://localhost:8888
spring.zipkin.base-url=http://127.0.0.1:9411/
spring.sleuth.sampler.probability=1.0
#eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/

# Actuator endpoints for Circuit Breaker

# circuit breaker will be "ON"
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

# Circuit Breaker configuration
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.registerHealthIndicator=true

# if exceed, the status will be open - circuit breaker will initiate
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.failureRateThreshold=50 

# if exceeded, circuit breaker will open and start calculating the number of failed calls - CLOSED -> OPEN (error) 
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.automaticTransitionFromOpenToHalfOpenEnabled=true

# it will wait for 5 sec and them move to HAlf Open to see if calls are going through 
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.waitDurationInOpenState=5s
# when half-open status, it will allow 3 times of trial to decide whether go to closed or open again 
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.permittedNumberOfCallsInHalfOpenState=3

# number of calls to count from transitioning from CLOSE state, 10 times 
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.slidingWindowSize=10
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.slidingWindowType=COUNT_BASED

# Retry configuration

# this is the configuration for returning default method 

# turn on this retry method = true 
resilience4j.retry.instances.EMPLOYEE-SERVICE.registerHealthIndicator=true

# every 2 seconds, the app will call the service if they will return OK or not (for 5 times) 
resilience4j.retry.instances.EMPLOYEE-SERVICE.waitDuration=2s
# will try up to 5 times until we decide to return default method 
resilience4j.retry.instances.EMPLOYEE-SERVICE.maxRetryAttempts=5












































